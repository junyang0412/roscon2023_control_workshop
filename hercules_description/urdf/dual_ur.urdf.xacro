<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg name)">
   <!-- robot name parameter -->
   <xacro:arg name="name" default="dual_ur"/>

   <!-- import component macros -->
   <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>
   <xacro:include filename="$(find robotiq_85_description)/urdf/robotiq_85_gripper_macro.urdf.xacro" />

   <!-- parameters -->
   <xacro:arg name="prefix" default="" />
   <xacro:arg name="joint_limit_params" default=""/>
   <xacro:arg name="kinematics_params" default=""/>
   <xacro:arg name="physical_params" default=""/>
   <xacro:arg name="visual_params" default=""/>
   <xacro:arg name="transmission_hw_interface" default=""/>
   <xacro:arg name="safety_limits" default="false"/>
   <xacro:arg name="safety_pos_margin" default="0.15"/>
   <xacro:arg name="safety_k_position" default="20"/>
   <!-- ros2_control related parameters -->
   <xacro:arg name="use_mock_hardware" default="true" />
   <xacro:arg name="mock_sensor_commands" default="false" />
   <xacro:arg name="headless_mode" default="false" />
   <!-- initial position for fake hardware -->
   <xacro:arg name="initial_positions_port_file" default="$(find hercules_description)/config/initial_positions_port_arm.yaml"/>
   <xacro:arg name="initial_positions_starboard_file" default="$(find hercules_description)/config/initial_positions_starboard_arm.yaml"/>
   <!-- Simulation parameter -->
   <xacro:arg name="sim_gazebo_classic" default="false" />
   <xacro:arg name="sim_gazebo" default="false" />
   <xacro:arg name="simulation_controllers" default="$(find hercules_description)/config/dual_ur_controllers.yaml" />

   <!-- convert to property to use substitution in function -->
   <xacro:property name="initial_positions_port_file" default="$(arg initial_positions_port_file)"/>
   <xacro:property name="initial_positions_starboard_file" default="$(arg initial_positions_starboard_file)"/>

   <!-- create link fixed to the "world" -->
   <link name="world" />

   <xacro:property name="box_base_size" value="0.3" />

   <!-- Add Fixture links for manipulators -->
   <link name="manipulator_fixture_box">
     <visual>
       <origin xyz="0 0 0" rpy="0 0 0"/>
       <geometry>
         <box size="${box_base_size} ${box_base_size} ${box_base_size}"/>
       </geometry>
       <material name="sr_violet">
         <color rgba="${102/255} ${46/255} ${145/255} 1.0" />
       </material>
     </visual>
     <collision>
       <origin xyz="0 0 0" rpy="0 0 0"/>
       <geometry>
         <box size="${box_base_size} ${box_base_size} ${box_base_size}"/>
       </geometry>
     </collision>
   </link>

   <joint name="world-manipulator_fixture_box" type="fixed">
     <parent link="world" />
     <child link="manipulator_fixture_box" />
     <origin xyz="0 0 ${ box_base_size/2 }" rpy="0 0 0" />
   </joint>

   <!-- arm -->
   <xacro:ur_robot
     name="port_$(arg name)"
     tf_prefix="port_"
     parent="manipulator_fixture_box"
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     transmission_hw_interface="$(arg transmission_hw_interface)"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     use_mock_hardware="$(arg use_mock_hardware)"
     mock_sensor_commands="$(arg mock_sensor_commands)"
     headless_mode="$(arg headless_mode)"
     initial_positions="${xacro.load_yaml(initial_positions_port_file)}"
     sim_gazebo_classic="$(arg sim_gazebo_classic)"
     sim_gazebo="$(arg sim_gazebo)" >
     <origin xyz="0 ${ box_base_size/2 } 0" rpy="${pi/2} 0 ${pi}" />          <!-- position robot in the world -->
   </xacro:ur_robot>

   <xacro:robotiq_85_gripper
     name="port_gripper_$(arg name)"
     prefix="port_"
     parent="port_tool0"
     use_mock_hardware="$(arg use_mock_hardware)"
     mock_sensor_commands="$(arg mock_sensor_commands)"
     sim_gazebo_classic="$(arg sim_gazebo_classic)"
     sim_gazebo="$(arg sim_gazebo)" >
     <origin xyz="0 0 0" rpy="0 -${pi/2} 0"/>
   </xacro:robotiq_85_gripper>

   <!-- arm -->
   <xacro:ur_robot
     name="starboard_$(arg name)"
     tf_prefix="starboard_"
     parent="manipulator_fixture_box"
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     transmission_hw_interface="$(arg transmission_hw_interface)"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     use_mock_hardware="$(arg use_mock_hardware)"
     mock_sensor_commands="$(arg mock_sensor_commands)"
     headless_mode="$(arg headless_mode)"
     initial_positions="${xacro.load_yaml(initial_positions_starboard_file)}"
     sim_gazebo_classic="$(arg sim_gazebo_classic)"
     sim_gazebo="$(arg sim_gazebo)" >
     <origin xyz="0 -${ box_base_size/2 } 0" rpy="${pi/2} 0 0" />          <!-- position robot in the world -->
   </xacro:ur_robot>

   <xacro:robotiq_85_gripper
     name="starboard_gripper_$(arg name)"
     prefix="starboard_"
     parent="starboard_tool0"
     use_mock_hardware="$(arg use_mock_hardware)"
     mock_sensor_commands="$(arg mock_sensor_commands)"
     sim_gazebo_classic="$(arg sim_gazebo_classic)"
     sim_gazebo="$(arg sim_gazebo)">
     <origin xyz="0 0 0" rpy="0 -${pi/2} 0"/>
   </xacro:robotiq_85_gripper>

   <xacro:if value="$(arg sim_gazebo_classic)">
     <!-- Gazebo plugins -->
     <gazebo reference="world">
     </gazebo>
     <gazebo>
       <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
         <parameters>$(arg simulation_controllers)</parameters>
       </plugin>
     </gazebo>
   </xacro:if>

   <xacro:if value="$(arg sim_gazebo)">
     <!-- Ignition plugins -->
     <gazebo reference="world">
     </gazebo>
     <gazebo>
       <plugin filename="libignition_ros2_control-system.so" name="ignition_ros2_control::IgnitionROS2ControlPlugin">
         <parameters>$(arg simulation_controllers)</parameters>
         <controller_manager_node_name>$(arg prefix)controller_manager</controller_manager_node_name>
       </plugin>
     </gazebo>
   </xacro:if>

</robot>
